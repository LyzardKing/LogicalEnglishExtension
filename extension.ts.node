// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import * as cp from 'child_process';
const { convert } = require('html-to-text');
import SWIPL, { type SWIPLModule } from 'swipl-wasm';
import * as fs from 'fs';
const StreamZip = require('node-stream-zip');
// import * as process from 'process';

// This method is called when your extension is activated
// Your extension is activated the very first time the command is executed
export async function activate(context: vscode.ExtensionContext) {

	// Use the console to output diagnostic information (console.log) and errors (console.error)
	// This line of code will only be executed once when your extension is activated
	console.log('Congratulations, your extension "logical-english-extension" is now active!');
	//Create output channel
	let le_output = vscode.window.createOutputChannel("Logical English");
	const swipl = await SWIPL({ 
		arguments: ["-q"],
		// @ts-ignore
		// preRun: [async (module) => { 
		// 	module.FS.mkdir('/working');
		// 	module.FS.writeFile('/working/logicalenglish-0.0.3.zip', fs.readFileSync("/home/galileo/Documents/Projects/LogicalEnglish/pack/logicalenglish-0.0.3.zip"));
		// }]
	});

	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	context.subscriptions.push(
		vscode.commands.registerCommand('logical-english-extension.query', async () => {
			const editor = vscode.window.activeTextEditor;
			if (!editor) {
				return;
			}
			const filename = editor.document.uri.fsPath;
			var fileExt = filename.split('.').pop();
			if (fileExt !== "le" && fileExt !== "pl") {
				return;
			}
			const content = fs.readFileSync(filename, "utf-8");
			// Set module with .split("/").pop()?
			const module = filename.split("/").pop()?.replace(/\.\w+$/g, "");
			const queries = get_queries(editor, fileExt);
			const scenarios = get_scenarios(editor, fileExt);

			const query = await vscode.window.showQuickPick(queries, {
				ignoreFocusOut: true
			});
			const scenario = await vscode.window.showQuickPick(scenarios, {
				ignoreFocusOut: true
			});
// 			let output = await execShell(`
// swipl -g "working_directory(_, '${filename.replace(/\/\w+.\w+$/g, "")}'),
// use_module(${await set_library()}),
// read_file_to_string('${filename}', Document, []),
// parse_and_query_and_explanation('${module}', en(Document), ${query}, with(${scenario}), Answer),
// write(Answer),
// halt."`);
// 			output = convert(output, {}).replace(/(^| )\* /gm, "$1  ").replace(/and\n\s+/gm, "and ");//.replace(/(^(?:\s\s)+)\s?/gm, `$1`);
// 			// vscode.window.showInformationMessage(output);
// 			le_output.append(output + "\n\n");
// 			le_output.show(true);
			swipl.prolog.call("use_module('/working/logicalenglish-0.0.3.zip').");
			// @ts-ignore
			const output = await swipl.prolog.query(`
parse_and_query_and_explanation('${module}', en(${content}), ${query}, with(${scenario}), R).
`).once().R;
			// @ts-ignore
			console.log(swipl.prolog.query("member(X, [a, b, c]).").once().X);
			console.log(output);
			le_output.append(output + "\n\n");
			le_output.show(true);
		})
	);

	context.subscriptions.push(
		vscode.commands.registerCommand('logical-english-extension.show-prolog', async () => {
			const editor = vscode.window.activeTextEditor;
			if (!editor) {
				return;
			}
			const filename = editor.document.uri.fsPath;
			var fileExt = filename.split('.').pop();
			if (fileExt !== "le" && fileExt !== "pl") {
				return;
			}
			const content = fs.readFileSync(filename, "utf-8");
			// Set module with .split("/").pop()?
			const module = filename.split("/").pop()?.replace(/\.\w+$/g, "");
			// Newer version of LE can use null, but the older pack returns false.
			const query = get_queries(editor, fileExt)[0];
			const scenario = get_scenarios(editor, fileExt)[0];
// 			let output = await execShell(`
// swipl -g "working_directory(_, '${filename.replace(/\/\w+.\w+$/g, "")}'),
// use_module(${await set_library()}),read_file_to_string('${filename}', Document, []),
// parse_and_query_and_explanation('${module}', en(Document), ${query}, with(${scenario}), _), show(prolog),
// halt."`);
			// output = convert(output, {}).replace(/(^| )\* /gm, "$1  ").replace(/and\n\s+/gm, "and ");//.replace(/(^(?:\s\s)+)\s?/gm, `$1`);
			// vscode.window.showInformationMessage(output);
			swipl.prolog.call("use_module('/home/galileo/Documents/Projects/LogicalEnglish/le_answer.pl').");
			const full_query = `
parse_and_query_and_explanation('${module}', en("${content}"), ${query}, with(${scenario}), _),
with_output_to(string(R), show(prolog)).`;
			// @ts-ignore
			const output = swipl.prolog.query(full_query).once().R;
			console.log(output);
			le_output.append(output + "\n\n");
			le_output.show(true);
		})
	);
}

// This method is called when your extension is deactivated
export function deactivate() { }

function get_queries(editor: vscode.TextEditor, fileExt: string) {
	let result: string[] = [];
	let pattern = /(?:query|domanda) (.+?) (?:is|.):/g;
	if (fileExt === "pl") {
		pattern = /example\((.+?),/g;
	}
	if (editor) {
		let text = editor.document.getText();
		const matches = [...text.matchAll(pattern)];
		matches.forEach((item) => {
			result.push(item[1]);
		});
	}
	return result;
}

function get_scenarios(editor: vscode.TextEditor, fileExt: string) {
	let result: string[] = [];
	let pattern = /scenario (.+?) (?:is|.):/g;
	if (fileExt === "pl") {
		pattern = /query\((.+?),/g;
	}
	if (editor) {
		let text = editor.document.getText();
		const matches = [...text.matchAll(pattern)];
		matches.forEach((item) => {
			result.push(item[1]);
		});
	}
	return result;
}

const execShell = (cmd: string) =>
	new Promise<string>((resolve, reject) => {
		cp.exec(cmd, (err, out) => {
			if (err) {
				return reject(err);
			}
			return resolve(out);
		});
	});

async function set_library() {
	let library = "library(le_answer)";
	if (vscode.workspace.workspaceFolders === undefined) {
		console.log("ERROR");
		return;
	}
	try {
		let path = vscode.workspace.workspaceFolders[0].uri.path + "/le_answer.pl";
		await vscode.workspace.fs.stat(vscode.Uri.file(path));
		console.log("Using Local version ...");
		library = `\'${path}\'`;
	} finally {
		return library;
	}
}